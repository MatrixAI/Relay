~~~~~~~~~~~~~~~~~ Containerisation ~~~~~~~~~~~~~~~
https://blog.netapp.com/blogs/containers-vs-vms/

the old way of providing a platform for services was to have a server with
a hypervisor and then OSs running on top of the hypervisor and THEN have
programs running on the virtual machine.

Containerisation removes the need for running multiple OSs on the server.
A containerised cloud platform may look like 1 OS on hardware running a
container engine which then has many applications running on top of that.
These applications are their own binaries and may have their own
dependencies (which come in the container image) but don't actually need to
run their own virtual machine for the image to run.

The containerisation of applications and their dependencies means that
changes to the underlying OS that the platform runs on won't impact the app
itself. This app can be ported to different OSs and still run as long as
the container engine maintains the same interface.

This is an extra abstraction layer on top of how VMs work.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dockerfile tutorial
https://linoxide.com/containers/guide-docker-dockerfile-example-build-
image/

more crap on docker and containerd and runc and the environment
https://hackernoon.com/docker-containerd-standalone-runtimes-heres-what-
you-should-know-b834ef155426

##########################################################################
Containers

- advanced implementation of `chroot` based isolation
- chroot is a very basic and simplistic program which does some form of
  containerisation

  All chroot does is it changes the root directory for the running process
  but it doesn't manage network, security, CPU, disk etc.
- systemd-nspawn (on arch linux) is a beefier version of chroot which can
  be used to run containerised environments for commands or OSs

- Linux Cgroups (control groups)
  https://www.mjmwired.net/kernel/Documentation/cgroups.txt

  https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/
  6/html/resource_management_guide/ch01

  https://sysadmincasts.com/episodes/14-introduction-to-linux-control-
  groups-cgroups

  From reading, I'm seeing that cgroups is how the ?linux kernel? manages
  containerisation. It only virtualises the space and resources that a
  process runs in. It doesn't provide any abstractions on top of a given OS
  unless in the process running in the cgroup runs another vm or
  hypervisor.

~~ for now this is probably enough info on containers. will revisit as
needed ~~~

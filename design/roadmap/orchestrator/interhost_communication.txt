INTERHOST COMMUNICATION

This document tracks thoughts on interhost communication between orchestrator
nodes.

o we don't have control over what happens when packets are in flight
o hosts can reside on different networks and network types
  . do we need to do our own routing between hosts?
    
    I think yes we do because we can only assume that not all hosts will be on
    the same network. This is probably the safest assumption to make.

  . hosts can be virtual or physical, the orchestrator doesn't know and doesn't
    really care

  . communication should be point-to-point as much as possible
    ? feasibility and effectiveness need to be examined

  . we know that each node is running the same orchestrator code. Or at least we
    don't need to consider malicious nodes. This is because a company or group
    running the network wouldn't benefit from sabotaging a single node in their
    network ... why would you shoot yourself in the foot?

   this simplifies security a bit as we don't need to consider malicious nodes
    pretending to behave like legitimate ones. 
o scale of the Matrix network
  . one host
  . a few hosts
  . many hosts
  . hundreds, thousands, even more hosts

  My personal thoughts on the feasibility of the interconnection of
  orchestrators are that they should most definitely not be connected to each
  other orchestrator. Every bit of resource dedicated to maintaining the network
  is resource not being used for the actual purpose of the network - to run and
  scale whatever services are needed.

  The size of routing metadata should be adaptable to what free resources there
  are. This is probably a feature to be added later on though but maybe could be
  kept in mind when designing and testing the network.

  Another point raised in discussions is an analogy of neural network abstract
  designs to nodes in the network.

o routing designs
  . ant colony routing
  . antnet
  . neural networks
  . reinforcement learning

  Firstly it should probably be made clearer the structure of the orchestrator
  network as well as what needs to be transported on the network. For example,
  if the network handles a lot of image fetches from databases, it doesn't
  matter which database instance is accessed if it's a distributed/replicated
  database.

  However if there needs to be long running connections to a server for a game,
  the same source and sink nodes need to be there for the connection unless an
  explicit upgrade is requested.

  However in the case just described, we can alter the route from source to sink
  without disrupting the flow. Again this depends highly on the structure of the
  network. If the size of the network is very small, we can actually just use
  traditional routing algorithms or even just send data to and from the source
  and sink directly.

  If for some reason someone wants thousands of services in a world-wide mesh,
  we could actually see a sort of tiered heirarchy in the network.
  
  Scaling a network can be done vertically and horizontally and each form of
  scaling may be better for certain situations.
